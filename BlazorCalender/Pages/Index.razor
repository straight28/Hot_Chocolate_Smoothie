@page "/"
@using BlazorCalender.Data

<h1>Hello, #Szdf!</h1>

<style type="text/css">
    #tblParent tbody tr td {
        width: 200px;
        height: 200px;
    }

    #divParent {
        position: relative;
    }


    #divModal {
        z-index: 10;
        position: absolute;
        border : 1px solid #000000;
        border-radius : 3px;
        background-color : #ffffff;
        left: 40%;
        top: 20%;
        width: 400px;
        min-height: 300px;
    }

    .modalHeading {
        text-align:center;
        font-size:50px;
        text-decoration:underline;
        margin-bottom: 36px;
    }


</style>

@if (displayModal)
{
    <div id="divModal">
        <div class="container">
            <div class="panel panel-default">
                <div class="panel-heading modalHeading">Set Note</div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-4">
                            <label>From Date : </label>
                        </div>
                        <div class="col-md-8">
                            <input type="date" style="width:100%;" />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4">
                        <label>To Date : </label>
                    </div>
                    <div class="col-md-8">
                        <input type="date" style="width:100%" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4">
                        <label>To Date : </label>
                    </div>
                    <div class="col-md-8">
                        <input type="date" style="width:100%" />
                    </div>
                </div>

                <div class="row" style="margin-bottom:10px;">
                    <div class="col-md-6">
                    </div>
                    <div class="col-md-6" style="text-align:right">
                        <button class="btn btn-success" style="float:left;margin-right:5px;">저장</button>
                        <button class="btn btn-danger" @onclick="CloseModal" style="float:left">닫기</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<select @onchange="LoadCalender">
    @foreach (var monthName in monthNames)
    {
        <option>@monthName</option>
    }
</select>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            @for (var dayIndex = 0; dayIndex < days.Count(); dayIndex++)
            {
                <th>
                    @days[dayIndex]
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @for (var weekIndex = 0; weekIndex < weeks.Count(); weekIndex++)
        {
            <tr>
                @for (var dayIndex = 0; dayIndex < weeks[weekIndex].Dates.Count(); dayIndex++)
                {
                    var wIndex = weekIndex;
                    var dIndex = dayIndex;

                    <td @ondblclick="@(() => OpenModal(wIndex, dIndex))">
                        @weeks[weekIndex].Dates[dayIndex].DateValue
                        <br /><br />

                        <label style="color:orangered;font-weight:bold">@weeks[weekIndex].Dates[dayIndex].Note</label>

                        Cell Number : [@weekIndex, @dayIndex]
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code{

    bool displayModal = false;
    List<string> monthNames = new List<string>();
    List<string> days = new List<string>();
    List<WeekClass> weeks = new List<WeekClass>();
    DateTime startDate = DateTime.Now;
    DateTime endDate = DateTime.Now.AddMonths(1).AddDays(-1);



    protected override void OnInitialized()
    {
        monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToList();
        GenerateCalenderHead();
        GenerateCalenderBody();
    }

    private void LoadCalender(ChangeEventArgs e)
    {
        var month = e.Value.ToString();

        int monthIndex = DateTime.ParseExact(month, "MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("ko-KR")).Month;
        startDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        endDate = (new DateTime(DateTime.Now.Year, monthIndex, 1)).AddMonths(1).AddDays(-1);

        GenerateCalenderHead();
        GenerateCalenderBody();

    }

    private void GenerateCalenderHead()
    {
        var day1 = new List<string>();

        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            day1.Add(dt.ToString("dddd"));
        }
        days = day1.Distinct().ToList();
    }

    private void GenerateCalenderBody()
    {
        weeks = new List<WeekClass>();

        int flag = 0;
        WeekClass week = new WeekClass();
        List<DayEvent> dates = new List<DayEvent>();
        var totalDays = (int)(endDate - startDate).TotalDays;
        int countDays = 0;


        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            flag++;

            dates.Add(new DayEvent()
            {
                DateValue = dt.ToString("dd-MM-yyyy"),
                DayName = dt.ToString("dddd")
            });


            if (flag == 7)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);

                dates = new List<DayEvent>();
                flag = 0;
            }

            if (countDays == totalDays)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);
                break;
            }

            countDays++;

        }



    }


    private void CloseModal()
    {
        displayModal = false;
    }

    private void OpenModal(int wIndex, int dIndex)
    {
        displayModal = true;
    }

}

